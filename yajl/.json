{
    "kde": {
        "kmail": {
            "v4.14.1": {
                "messages-unencrypted": {
                    "reader": {
                        "store-displayed-messages-unencrypted": "true"
                    }
                }
            }
        }
    },
    "nanana.batman": {
        "git": {
            "v1": {
                "pro-test": {
                    "branch": {
                        "autosetuprebase": "always"
                    },
                    "commit": {
                        "gpgsign": "true"
                    },
                    "core": {
                        "editor": "mate -w\nquotepath = false"
                    },
                    "diff": {
                        "tool": "Kaleidoscope"
                    },
                    "difftool \"Kaleidoscope\"": {
                        "cmd": "ksdiff --partial-changeset --relative-path \\\"$MERGED\\\" -- \\\"$LOCAL\\\" \\\"$REMOTE\\\""
                    },
                    "difftool \"sourcetree\"": {
                        "cmd": "opendiff \\\"$LOCAL\\\" \\\"$REMOTE\\\"\npath ="
                    },
                    "filter \"lfs\"": {
                        "clean": "git-lfs clean %f\nsmudge = git-lfs smudge %f\nrequired = true"
                    },
                    "git-tmbundle": {
                        "ext-app": "stree\next-custom-cmd = ksdiff"
                    },
                    "gpg": {
                        "program": "/usr/local/bin/gpg"
                    },
                    "merge": {
                        "tool": "Kaleidoscope"
                    },
                    "mergetool \"Kaleidoscope\"": {
                        "cmd": "ksdiff --merge --output \\\"$MERGED\\\" --base \\\"$BASE\\\" -- \\\"$LOCAL\\\" --snapshot \\\"$REMOTE\\\" --snapshot\ntrustexitcode = true"
                    },
                    "mergetool \"sourcetree\"": {
                        "cmd": "/Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \\\"$LOCAL\\\" \\\"$REMOTE\\\" -ancestor \\\"$BASE\\\" -merge \\\"$MERGED\\\"\ntrustExitCode = true"
                    },
                    "user": {
                        "name": "ðŸ˜Ž"
                    }
                }
            }
        }
    },
    "none": {
        "gtimelog": {
            "v0.9": {
                "gtimelog": {
                    "gtimelog": {
                        "edit_task_list_cmd": "",
                        "editor": "vim",
                        "gtk-completion": "True",
                        "hours": "10",
                        "list-email": "contact@markus-raab.org",
                        "mailer": "xdg-email mailto:%s",
                        "name": "Markus Raab",
                        "spreadsheet": "oocalc %s",
                        "task_list_url": "",
                        "virtual_midnight": "04:00"
                    }
                }
            }
        },
        "hosts": {
            "v1": {
                "augeas-localhost": [
                    "The following lines are desirable for IPv6 capable hosts",
                    "canonical",
                    "localhost",
                    "ipaddr",
                    "127.0.0.1"
                },
                "2": {
                    "alias[1]": "ip6-localhost",
                    "alias[2]": "ip6-loopback",
                    "canonical": "localhost",
                    "ipaddr": "::1"
                },
                "3": {
                    "canonical": "ip6-allnodes",
                    "ipaddr": "ff02::1"
                },
                "4": {
                    "canonical": "ip6-allrouters",
                    "ipaddr": "ff02::2"
                }
            },
            "localhost": ""
        }
    },
    "mutt": {
        "v1": {
            "muttrc": {
                "set folder": "~/Mail/",
                "set from": "contact@markus-raab.org",
                "set mask": "!^\\\\.[^.]",
                "set mbox_type": "Maildir",
                "set postponed": "+.pk-mutt-postponed",
                "set realname": "Markus Raab",
                "set record": "+.pk-mutt-record",
                "set spoolfile": "~/Mail/"
            }
        }
    },
    "test": {
        "v1": {
            "git-commit-test": {
                "andmore": "value2",
                "newval": "because i want to test the update",
                "singleexport": "works :)",
                "somemore": "otherval",
                "someval": "somevar",
                "update": "pretty"
            }
        }
    },
    "testini": {
        "v1": {
            "test": {
                "life": {
                    "purpose": "none"
                }
            }
        }
    },
    "unison": {
        "v2.40.102": {
            "multi-computer-setup": ""
        }
    },
    "vim": {
        "v8": {
            "vimrc": [
                "\" Configuration file for vim",
                "",
                "set nocompatible",
                "filetype off",
                "",
                "\"sometimes used (temporary):",
                "\"set paste",
                "\"set textwidth=72",
                "\"set colorcolumn=72",
                "\"set ignorecase",
                "",
                "set tabpagemax=80",
                "set swb=usetab \" use :sb to jump to a file per name",
                "",
                "\" To start vundle use:",
                "\"",
                "\" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle",
                "\" vim +BundleInstall +qall",
                "\"",
                "\" See also https://github.com/gmarik/Vundle.vim",
                "set rtp+=~/.vim/bundle/vundle/",
                "call vundle#rc()",
                "",
                "\" https://github.com/gmarik/vundle",
                "\"",
                "\" Bundles are in .vim/bundle and .vim/autoload? (but not .vim/plugin)",
                "\"",
                "\" :BundleInstall       - install bundles (note to add them below in config)",
                "\"                        To install new bundles, use :BundleInstall and press tab",
                "\" :BundleInstall!      - update all bundles",
                "\" :BundleList          - list configured bundles",
                "\" :BundleSearch(!) foo - search(or refresh cache first) for foo",
                "\" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles",
                "\"",
                "\" see :h vundle for more details or",
                "\" https://github.com/gmarik/vundle/blob/master/doc/vundle.txt",
                "\" NOTE: comments after Bundle command are not allowed..",
                "\"",
                "\" let Vundle manage Vundle",
                "\" required! ",
                "Bundle 'gmarik/vundle'",
                "",
                "\" For latex",
                "Bundle 'git://vim-latex.git.sourceforge.net/gitroot/vim-latex/vim-latex'",
                "",
                "\" For async dispatch",
                "Bundle 'git://github.com/tpope/vim-dispatch.git'",
                "",
                "\"disable folding at startup",
                ":let Tex_FoldedSections=\"\"",
                ":let Tex_FoldedEnvironments=\"\"",
                ":let Tex_FoldedMisc=\"\"",
                ":let Tex_CompileRule_dvi=\"make\"",
                "\":let Tex_CompileRule_dvi=\"latexmk\"",
                "\":let g:Tex_DefaultTargetFormat = 'pdf'",
                "\":let g:Tex_CompileRule_pdf = 'latexmk -pdf -pvc $*'",
                "",
                "",
                "\" needs  7.3.584 (wheezy), installed using vim-addon-manager",
                "\"Bundle 'https://github.com/Valloric/YouCompleteMe.git'",
                "",
                "\" For git integration",
                "Bundle 'git://github.com/tpope/vim-fugitive.git'",
                "",
                "\" For clang-format",
                "Bundle 'https://github.com/rhysd/vim-clang-format'",
                "",
                "\" Define own operators easily (recommended by clang-format)",
                "Bundle 'https://github.com/kana/vim-operator-user'",
                "",
                "\" CLang completion (not used anymore, included in YouCompleteMe)",
                "\"Bundle 'clang-complete'",
                "",
                "\" For Markdown",
                "Bundle 'godlygeek/tabular'",
                "Bundle 'plasticboy/vim-markdown'",
                "let g:vim_markdown_folding_disabled=1",
                "",
                "",
                "\" Use :NERDTree to show the directory layout",
                "\"",
                "\"    Use the natural vim navigation keys hjkl to navigate the files.",
                "\"    Press o to open the file in a new buffer or open/close directory.",
                "\"    Press t to open the file in a new tab.",
                "\"    Press i to open the file in a new horizontal split.",
                "\"    Press s to open the file in a new vertical split.",
                "\"    Press p to go to parent directory.",
                "\"    Press r to refresh the current directory.",
                "\"",
                "\" See http://www.catonmat.net/blog/vim-plugins-nerdtree-vim/",
                "Bundle 'The-NERD-tree'",
                "",
                "\" Finds a project together with The-NERD_tree",
                "Bundle 'NERD_tree-Project'",
                "",
                "\" autocomplete code snippets",
                "Bundle 'snipMate'",
                "",
                "\" Use :A to quickly change between header/source",
                "\"",
                "\" :AS splits and switches",
                "\" :AV vertical splits and switches",
                "\" :AT new tab and switches",
                "\" :AN cycles through matches",
                "\" :IH switches to file under cursor",
                "\" :IHS splits and switches",
                "\" :IHV vertical splits and switches",
                "\" :IHT new tab and switches",
                "\" :IHN cycles through matches ",
                "Bundle 'a.vim'",
                "",
                "\" makes % much more powerful",
                "\" (jump to anything what opens or closes)",
                "Bundle 'matchit.zip'",
                "",
                "\" Doxygen support",
                "\" use :Dox to document a function",
                "\"",
                "\" see .vim/bundle/DoxygenToolkit.vim/README",
                "\"",
                "\" Config for DoxygenToolkit:",
                "\"",
                "\"let g:DoxygenToolkit_commentType=\"C++\"",
                "\"let g:DoxygenToolkit_briefTag_pre=\"\"",
                "\"let g:DoxygenToolkit_paramTag_pre=\"\\\\param \"",
                "\"let g:DoxygenToolkit_returnTag=\"\\\\return \"",
                "Bundle 'DoxygenToolkit.vim'",
                "",
                "\" \\cc .. commit to repository",
                "\" \\ca .. add to repository",
                "\" \\cD .. delete from repository",
                "\" \\cs .. status of repository",
                "\" \\cd .. show diff",
                "\" \\cv .. show vimdiff",
                "\" \\cl .. show log",
                "Bundle 'git://repo.or.cz/vcscommand'",
                "",
                "Plugin 'rust-lang/rust.vim'",
                "",
                "",
                "\" Needed for bundle (? breaks python with tabs):",
                "\"filetype plugin indent on",
                "",
                "\"Ex mode is useless, let us quit the application:",
                "map Q :qa<CR>",
                "",
                "\"map <C-Q> :qa<CR>",
                "",
                "",
                "",
                "",
                "\"",
                "\" END OF BUNDLE CONFIGURATION",
                "\"",
                "",
                "",
                "",
                "",
                "",
                "\"show options when pressing tab",
                "set wildmenu",
                "set wildmode=list:longest",
                "",
                "function! Kdb(var)",
                "\tlet shellcmd='kdb get user/sw/vim/' . a:var",
                "\tlet output=system(shellcmd)",
                "\treturn output",
                "endfunction",
                "",
                "",
                "set backupdir=~/tmp,/var/tmp,/tmp,.",
                "set directory=~/tmp,/var/tmp,/tmp,.",
                "",
                "function! KdbList(var)",
                "\tlet shellcmd='for i in `kdb ls user/sw/vim/' . a:var . '`; do echo -n \",\"; kdb get -n \"$i\"; done'",
                "\tlet output=system(shellcmd)",
                "\treturn output",
                "endfunction",
                "",
                "set dictionary=/usr/share/dict/words",
                "set complete=i",
                "set tags=/home/markus/.ctags,.ctags",
                "\"let &tags=KdbList('tags')",
                "\"let shellcmd='for i in `kdb ls user/sw/vim/path`; do echo -n \",\"; kdb get -n \"$i\"; done'",
                "\"let output=system(shellcmd)",
                "\"let &path='.' . output",
                "\"let &path='.' . KdbList('path')",
                "",
                "\"do not modify runtimepath, instead use vim-addons install..",
                "\"set runtimepath=~/.vim,/usr/share/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,~/.vim/after",
                "",
                "",
                "\" Normally we use vim-extensions. If you want true vi-compatibility",
                "\" remove change the following statements",
                "syntax enable",
                "",
                "\"grey tab markers",
                "set listchars=tab:>-,trail:.",
                "set list",
                "highlight SpecialKey ctermbg=Black ctermfg=DarkGrey",
                "",
                "\"reox tipps",
                "set nu",
                "",
                "\"map <F7> :'<,'>!xclip<CR><CR>",
                "\"vmap <F7> \"*y",
                "\"map <S-F7> :r!xclip -o<CR>",
                "",
                "",
                "au! Syntax {cpp,c,h,idl}",
                "au Syntax {cpp,c,h,idl} runtime syntax/doxygen.vim",
                "",
                "set spell\t\t\" Use spell correction",
                "set nocompatible\t\" Use Vim defaults instead of 100% vi compatibility",
                "set backspace=indent,eol,start\t\" more powerful backspacing",
                "set cindent",
                "set nobackup\t\t\" Don't keep a backup file",
                "set viminfo='20,\\\"1000\t\" read/write a .viminfo file, don't store more than",
                "\t\t\t\" 1000 lines of registers",
                "set history=1000\t\" keep 1000 lines of command line history",
                "set ruler\t\t\" show the cursor position all the time",
                "",
                "hi SpellBad ctermfg=White ctermbg=Black cterm=underline",
                "hi SpellCap ctermfg=White ctermbg=Black cterm=underline",
                "",
                "\" Set xterm title",
                "\"set title",
                "",
                "\" Copy and paste for X",
                "\" You need to install xsel for it",
                "\" (even without X support. If you have X support use the * register)",
                "command -range Xc :silent :<line1>,<line2>w !xsel -i",
                "command -range Xp :silent :r !xsel -o",
                "",
                "\" Define shortcuts",
                "\" (is needed because user commands must start uppercase)",
                "ca xc Xc",
                "ca xp Xp",
                "",
                "",
                "\" Suffixes that get lower priority when doing tab completion for filenames.",
                "\" These are files we are not likely to want to edit or read.",
                "set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc",
                "",
                "",
                "\" Debian uses compressed helpfiles. We must inform vim that the main",
                "\" helpfiles is compressed. Other helpfiles are stated in the tags-file.",
                "\" set helpfile=$VIMRUNTIME/doc/help.txt",
                "",
                "\" For reportbug",
                "augroup filetype",
                "  au BufRead reportbug.*\t\tset ft=mail",
                "  au BufRead reportbug-*\t\tset ft=mail",
                "augroup END",
                "",
                "\" The following are commented out as they cause vim to behave a lot",
                "\" different from regular vi. They are highly recommended though.",
                "set showcmd\t\t\" Show (partial) command in status line.",
                "set showmatch\t\t\" Show matching brackets.",
                "set incsearch\t\t\" Incremental search",
                "set autowrite\t\t\" Automatically save before commands like :next and :make",
                "set hls\t\t\t\" Make highlights coloured",
                "set magic\t\t\" Interprets '*.' in patterns",
                "",
                "\" Functions",
                "let spellst = [\"de\", \"en_gb\"]",
                "let langcnt = 0",
                "function Sel_lang()",
                "\tlet g:langcnt = (g:langcnt+1) % len(g:spellst)",
                "\tlet lang = g:spellst[g:langcnt]",
                "\t\" echo \"language \" . lang . \" selected\"",
                "\texe \"set spelllang=\" . lang",
                "endfunction",
                "",
                "\" Choose german as default",
                "\"call Sel_lang()",
                "\"call Sel_lang()",
                "",
                "\" http://vim.wikia.com/wiki/Search_across_multiple_lines",
                "\" Search for the ... arguments separated with whitespace (if no '!'),",
                "\" or with non-word characters (if '!' added to command).",
                "function! SearchMultiLine(bang, ...)",
                "  if a:0 > 0",
                "    let sep = (a:bang) ? '\\_W\\+' : '\\_s\\+'",
                "    let @/ = join(a:000, sep)",
                "  endif",
                "endfunction",
                "command! -bang -nargs=* -complete=tag S call SearchMultiLine(<bang>0, <f-args>)|normal! /<C-R>/<CR>",
                "\" use :S <words..> or :S! <words..>",
                "",
                "\"From gentoo:",
                "\" When editing a file, always jump to the last cursor position",
                " autocmd BufReadPost *",
                "       \\ if ! exists(\"g:leave_my_cursor_position_alone\") |",
                "       \\    if line(\"'\\\"\") > 0 && line (\"'\\\"\") <= line(\"$\") |",
                "       \\        exe \"normal g'\\\"\" |",
                "       \\    endif |",
                "       \\ endif",
                "",
                "\" Mappings",
                "map <C-\u001B[C> <w> \" next word",
                "map <C-\u001B[D> <b> \" prev word",
                "nmap <Esc>l :call Sel_lang()<CR>",
                "",
                "nmap <C-left> :tabprevious<cr> ",
                "map <C-left> :tabprevious<cr> ",
                "imap <C-left> <c-o>:tabprevious<cr>",
                "",
                "nmap <C-right> :tabnext<cr> ",
                "map <C-right> :tabnext<cr> ",
                "imap <C-right> <c-o>:tabnext<cr>",
                "",
                "nmap <C-t> :tabnew<cr> ",
                "imap <C-t> <ESC>:tabnew<cr> ",
                "",
                "\" \\ has an awkward position on german keyboards, so lets use something else!",
                "let mapleader=\",\"",
                "map <C-l> <C-]>\t\" Follow _L_ink on Ctrl+l",
                "",
                "\" OmniCppComplete",
                "\" let OmniCpp_NamespaceSearch = 1",
                "\" let OmniCpp_GlobalScopeSearch = 1",
                "\" let OmniCpp_ShowAccess = 1",
                "\" let OmniCpp_ShowPrototypeInAbbr = 1 \" show function parameters",
                "\" let OmniCpp_MayCompleteDot = 1 \" autocomplete after .",
                "\" let OmniCpp_MayCompleteArrow = 1 \" autocomplete after ->",
                "\" let OmniCpp_MayCompleteScope = 1 \" autocomplete after ::",
                "\" let OmniCpp_DefaultNamespaces = [\"std\", \"_GLIBCXX_STD\"]",
                "\" \" automatically open and close the popup menu / preview window",
                "\" \"au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif",
                "\" set completeopt=menuone,menu,longest,preview",
                "",
                "",
                "",
                "\" python settings",
                "\"from http://svn.python.org/projects/python/trunk/Misc/Vim/vimrc",
                "\"(excluding C settings)",
                "\" au BufRead,BufNewFile *.py,*.pyw set shiftwidth=4",
                "\" au BufRead,BufNewFile *.py,*.pyw set expandtab",
                "\" highlight BadWhitespace ctermbg=red guibg=red",
                "\" au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\\t\\+/",
                "\" au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /\\s\\+$/",
                "\" au BufRead,BufNewFile *.py,*.pyw set textwidth=79",
                "",
                "",
                "\"-- pandoc Markdown+LaTeX -------------------------------------------",
                "\" http://www.piware.de/2014/07/vim-config-for-markdownlatex-pandoc-editing/",
                "",
                "function s:MDSettings()",
                "    inoremap <buffer> <Leader>n \\note[item]{}<Esc>i",
                "    noremap <buffer> <Leader>b :! pandoc -t beamer % -o %<.pdf<CR><CR>",
                "    noremap <buffer> <Leader>l :! pandoc -t latex % -o %<.pdf<CR>",
                "    noremap <buffer> <Leader>v :! evince %<.pdf 2>&1 >/dev/null &<CR><CR>",
                "",
                "    \" adjust syntax highlighting for LaTeX parts",
                "    \"   inline formulas:",
                "    syntax region Statement oneline matchgroup=Delimiter start=\"\\$\" end=\"\\$\"",
                "    \"   environments:",
                "    syntax region Statement matchgroup=Delimiter start=\"\\\\begin{.*}\" end=\"\\\\end{.*}\" contains=Statement",
                "    \"   commands:",
                "    syntax region Statement matchgroup=Delimiter start=\"{\" end=\"}\" contains=Statement",
                "endfunction",
                "",
                "autocmd BufRead,BufNewFile *.md setfiletype markdown",
                "autocmd FileType markdown :call <SID>MDSettings()",
                "",
                "\" latex mappings and abbreviations",
                "",
                "ab .= \\doteq",
                "ab para Â§",
                "ino Â§ \\",
                "",
                "",
                "",
                "",
                "source ~/.vimrc-local"
            ]
        }
    },
    "zsh": {
        "v5": {
            "zshrc": [
                "#.zshrc",
                "# code to execute at shell startup",
                "",
                "",
                "#elektra configuration:",
                "#",
                "# should replace aliases, exports and hashes below",
                "#",
                "# Source functions in /etc/profile.d/",
                "#",
                "#for i in /etc/profile.d/* ; do",
                "#    if [ -r \"$i\" ]; then",
                "#        #echo sourcing $i",
                "#        source $i",
                "#    fi",
                "#done",
                "",
                "#some aliases",
                "alias a=\"sudo aptitude\"\t\t# run aptitude",
                "alias o=\"open-file-by-name\"",
                "alias d=\"diff -pruN\"\t\t# differences between files",
                "alias r=\"recode latin1..utf8\"\t# recode a file",
                "alias s=\"festival --tts\"\t# speak something out",
                "alias p='ps -fu $USER'\t\t# show own processes",
                "alias u='uptime'\t\t# show how long system is up",
                "alias l=\"ls\"\t\t\t# spell correction of ls",
                "alias s=\"ls\"\t\t\t# spell correction of ls",
                "alias up=\"sudo ifup\"",
                "alias no=\"yes n\"\t\t# why not having no too?",
                "alias ls=\"ls --color=auto\"\t# make ls colourful",
                "alias sl=\"ls\"\t\t\t# spell correction of ls too",
                "alias mv='nocorrect mv'\t\t#",
                "alias cp='nocorrect cp'\t\t#",
                "alias rm='nocorrect rm'\t\t#",
                "alias du=\"du -h --max-depth=1\"\t#",
                "alias cd/='cd /'\t\t# forgot a space for cd",
                "alias cd..='cd ..'\t\t# forgot a space for cd",
                "alias mkdir='nocorrect mkdir'\t#",
                "alias man='nocorrect man'\t#",
                "alias kdb='nocorrect noglob kdb'",
                "alias bin/kdb='nocorrect noglob bin/kdb'",
                "alias kdb-full='nocorrect noglob kdb-full'",
                "alias bin/kdb-full='nocorrect noglob bin/kdb-full'",
                "alias kdb-static='nocorrect noglob kdb-static'",
                "alias bin/kdb-static='nocorrect noglob bin/kdb-static'",
                "alias find='noglob find'\t#",
                "alias make='nocorrect make'\t# do not correct make test to tests if \"tests\" folder is present",
                "alias down=\"sudo ifdown\"",
                "alias diet-gcc=\"diet gcc -s -Os -pipe\"",
                "alias remod=\"sudo rmmod ipw2200 && sudo modprobe ipw2200 \"",
                "alias list=\"sudo iwlist eth1 scan\" ",
                "alias gping=\"ping www.google.at\"",
                "alias starte=\"kfmclient exec\"",
                "alias xfig=\"xfig -specialtext -latexfonts -startlatexFont default\"",
                "alias lintian=\"lintian -EI --color=auto --pedantic\"",
                "alias reprepro=\"reprepro -b ~reprepro\"",
                "alias git-undo-last-commit=\"git reset --soft HEAD~\"",
                "alias clang-format=\"clang-format-3.8 -style=file -i \"",
                "",
                "#autocomplete aliases:",
                "zstyle ':completion:*' completer _expand_alias _complete _ignored",
                "",
                "",
                "",
                "",
                "# ^A:multiuser on[RET]",
                "# screen -x",
                "",
                "# presentation using aliases (for completion)",
                "alias 0=\"man man --elektra:MANWIDTH=40\"",
                "",
                "# KONFIGURATIONSDATEIEN per key/value zugreifen",
                "",
                "alias 1='kdb set user/env/override/MANOPT -- \"-LC\"'",
                "",
                "# PROXY Ã„NDERN",
                "",
                "alias 3=\"kdb set system/env/override/http_proxy http://proxy.hogege.com:8000\"",
                "",
                "alias 5=\"wget --elektra-debug www.complang.tuwien.ac.at\"",
                "",
                "# MOTIVATION ftp proxy, auch Ã¼ber Konfigurationsdatei im Paper",
                "",
                "alias 4=\"kdb setmeta spec/env/override/ftp_proxy 'override/#0' /env/override/http_proxy\"",
                "",
                "# Umsetzung",
                "",
                "alias 6=\"kdb get -v /env/override/ftp_proxy\"",
                "",
                "",
                "#alias 5=\"kdb set user/env/option/debug\"",
                "",
                "# kann man weglassen",
                "alias 2='kdb mount env.ini /env ni'",
                "",
                "# kdb file /env",
                "",
                "#pipes stderr",
                "#alias -g P='>&2 2>&1 |'",
                "",
                "# Creates a directory and changes into it at one command",
                "function mkcd() {",
                "\t[ -n \"$1\" ] && mkdir -p \"$@\" && cd \"$1\"",
                "}",
                "",
                "#some hashes",
                "#(more in .zshrc-local or elektra)",
                "hash -d m=/home/user/MyDocs",
                "",
                "HISTFILE=${HOME}/.zsh_history\t# name of history file",
                "HISTSIZE=500000\t\t\t# internal history (larger for duplicated events)",
                "SAVEHIST=450000\t\t\t# history in files",
                "DIRSTACKSIZE=10\t\t\t# stack of directories",
                "MAIL=/var/mail/$USERNAME\t# where are new mails?",
                "MAILCHECK=30\t\t\t# check mails every 30 sec",
                "#REPLYTO=ich@markus-raab.org\t# reply to",
                "LOGCHECK=30\t\t\t# check login/logout every 30 sec",
                "",
                "unset TMOUT\t\t\t# don't timeout the session",
                "",
                "bindkey -v                      # vi key bindings",
                "",
                "bindkey \"^[[A\" history-beginning-search-backward",
                "bindkey \"^[[B\" history-beginning-search-forward",
                "# Use up and down key to search in the history with the current text",
                "# !word<tab> will autocomplete in the history",
                "# (up and down key can be used afterwards too)",
                "# use <ESC> + / to search backwards in the history (? to search forward)",
                "# (n(next) and N(previous) will scroll in the history in this mode)",
                "",
                "",
                "setopt always_to_end\t\t# move to end of word when completing",
                "setopt append_history\t\t# don't overwrite history file (multiple!)",
                "setopt share_history\t\t# share history between multiple sessions",
                "setopt auto_cd\t\t\t# change to directory when entering it as command",
                "setopt auto_menu\t\t# use menu completion",
                "setopt auto_pushd\t\t# cd will push old directory on stack",
                "setopt NO_hup\t\t\t# don't HUP running jobs when shell exits",
                "setopt NO_beep\t\t\t# don't beep around",
                "setopt NO_hist_beep\t\t# also don't beep at no history",
                "setopt NO_list_beep\t\t#",
                "setopt correct_all\t\t# correct all arguments in a line",
                "setopt extended_glob\t\t# tread ~, ^ as part of patterns",
                "setopt extended_history\t\t# save timestamps of history",
                "setopt glob_complete\t\t# cycle through glob possibilities",
                "setopt hist_expire_dups_first\t# duplicate internal events",
                "setopt hist_find_no_dups\t# but don't find duplicates",
                "setopt hist_ignore_all_dups\t# and ignore them",
                "setopt hist_ignore_dups\t\t# and don't put same commands to history",
                "setopt hist_ignore_space\t# first character a space -> don't put to history",
                "setopt hist_reduce_blanks\t# reduce blanks from command line in history",
                "setopt hist_save_no_dups\t# older commands that duplicate are omitted",
                "setopt hist_verify\t\t# perform history expansion and reload line",
                "setopt interactive_comments\t# i always want comments",
                "setopt list_packed\t\t# put list in columns",
                "setopt list_types\t\t# show trailing identifying mark",
                "setopt null_glob\t\t# delete globs without match instead of asking",
                "setopt pushd_ignore_dups\t# ignore dups on directory stack",
                "setopt pushd_silent\t\t# be silent after pushd and popd",
                "#setopt completion-ignore-case",
                "",
                "",
                "zstyle ':completion:*:cd:*' ignore-parents parent pwd #cd will never select the parent directory (e.g.: cd ../<TAB>):",
                "",
                "# prompt, right prompt, don't see XX possibilities and spelling prompt",
                "EXITCODE=\"%(?..%?%1v )\"",
                "#old one without exit codes:",
                "#PS1=$'%{\\e[0;36m%}%n@%m:%4c%1v%{\\e[0m%}> '",
                "",
                "PS1=$'%(?..%?%1v )%{\\e[0;36m%}%n@%m:%4c%1v%{\\e[0m%}> '",
                "RPS1=$'%{\\e[0;36m%}%D{%A %T}%{\\e[0m%}'",
                "",
                "# FOR asciinema:",
                "#PS1=$'%(?..%?%1v )%{\\e[0;36m%}%4c%1v%{\\e[0m%}> '",
                "#RPS1=",
                "#alias sudo='nocorrect sudo'",
                "LISTPROMPT=''",
                "SPROMPT='zsh: correct '%R' to '%r' ? ([Y]es/[N]o/[E]dit/[A]bort) '",
                "LPDEST=lj",
                "",
                "#activate coredumps",
                "ulimit -c unlimited",
                "",
                "#load other modules from ~/.zshfiles",
                "fpath=(~/.zshfiles $fpath)",
                "autoload -U ~/.zshfiles*(:t)",
                "",
                "#load compinit",
                "autoload -U compinit\t\t# full features tab completion",
                "compinit -C\t\t\t# start the tab completion",
                "zmodload -i zsh/complist\t# Color completion (For menu selection)",
                "",
                "#load local files",
                ". ~/.zshrc-local",
                ". ~/.env.sh",
                "",
                "#list running screens",
                "#if [[ -x $(which screen) ]]",
                "#then",
                "#    ZSHRC_SCREENLIST=(${${(M)${(f)\"$(screen -ls)\"}:#(#s)?:space:##([0-9]##).*}/(#b)?:space:#([0-9]##).*/$match[1]})",
                "#    if [[ $#ZSHRC_SCREENLIST -ge 1 ]]",
                "#    then",
                "#        echo \"There are $#ZSHRC_SCREENLIST screens running. $ZSHRC_SCREENLIST\"",
                "#    fi",
                "#fi",
                "",
                "#for i in viins vicmd; do",
                "#\tbindkey -M \"$i\" \"${key[Up]}\" vi-up-line-or-history",
                "#\tbindkey -M \"$i\" \"${key[Down]}\" vi-down-line-or-history",
                "#done",
                "#unset i",
                "",
                "#[[ -n \"${key[Up]}\" ]] && bindkey \"${key[Up]}\" history-search-backward",
                "#[[ -n \"${key[Down]}\" ]] && bindkey \"${key[Down]}\" history-search-forward",
                "",
                "#switch between vim and shell",
                "fancy-ctrl-z () {",
                "\tif [[ $#BUFFER -eq 0 ]]; then",
                "\t\tBUFFER=\"fg\"",
                "\t\tzle accept-line",
                "\telse",
                "\t\tzle push-input",
                "\t\tzle clear-screen",
                "\tfi",
                "}",
                "zle -N fancy-ctrl-z",
                "bindkey '^Z' fancy-ctrl-z",
                "",
                "autoload up-line-or-beginning-search",
                "autoload down-line-or-beginning-search",
                "zle -N up-line-or-beginning-search",
                "zle -N down-line-or-beginning-search",
                "",
                "[[ -n \"${key[Up]}\"      ]]  && bindkey   \"${key[Up]}\"       up-line-or-beginning-search",
                "[[ -n \"${key[Down]}\"    ]]  && bindkey   \"${key[Down]}\"    down-line-or-beginning-search",
                "",
                "#start up screen, if not already in",
                "#if [ -z $STY ]; then",
                "#        screen -D -R",
                "#fi"
            ]
        }
    }
}
